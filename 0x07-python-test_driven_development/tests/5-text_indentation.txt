=======================================
Test session for 5-text_indentation.py
=======================================
This module contains one function:
* text_indentation

Importing function from module

>>> text_indentation = __import__("5-text_indentation").text_indentation

' String text '
>>> text_indentation("Arthur didn't feel very good. He woke up blearily.")
Arthur didn't feel very good.
<BLANKLINE>
He woke up blearily.
<BLANKLINE>


' Three special characters '
>>> text_indentation(". . .")
.
<BLANKLINE>
.
<BLANKLINE>
.
<BLANKLINE>


' Special characters '
>>> text_indentation("@.*:%?")
@.
<BLANKLINE>
*:
<BLANKLINE>
%?
<BLANKLINE>


' Many spaces '
>>> text_indentation("          .          ") #doctest: +NORMALIZE_WHITESPACE
          .
<BLANKLINE>


' Number as text '
>>> text_indentation(42)
Traceback (most recent call last):
...
TypeError: text must be a string


' Text is a boolean '
>>> text_indentation(False)
Traceback (most recent call last):
...
TypeError: text must be a string


' Text is a float '
>>> text_indentation(float("NaN"))
Traceback (most recent call last):
...
TypeError: text must be a string


' Text is empty '
>>> text_indentation()
Traceback (most recent call last):
...
TypeError: text_indentation() missing 1 required positional argument: 'text'


' Text is a set '
>>> text_indentation({"This", "is", "a", "set"})
Traceback (most recent call last):
...
TypeError: text must be a string